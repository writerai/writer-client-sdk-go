// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/writerai/writer-client-sdk-go/pkg/models/shared"
	"net/http"
)

type FindTermsPartOfSpeech string

const (
	FindTermsPartOfSpeechNoun      FindTermsPartOfSpeech = "noun"
	FindTermsPartOfSpeechVerb      FindTermsPartOfSpeech = "verb"
	FindTermsPartOfSpeechAdverb    FindTermsPartOfSpeech = "adverb"
	FindTermsPartOfSpeechAdjective FindTermsPartOfSpeech = "adjective"
)

func (e FindTermsPartOfSpeech) ToPointer() *FindTermsPartOfSpeech {
	return &e
}

func (e *FindTermsPartOfSpeech) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "noun":
		fallthrough
	case "verb":
		fallthrough
	case "adverb":
		fallthrough
	case "adjective":
		*e = FindTermsPartOfSpeech(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindTermsPartOfSpeech: %v", v)
	}
}

type FindTermsSortField string

const (
	FindTermsSortFieldTerm             FindTermsSortField = "term"
	FindTermsSortFieldCreationTime     FindTermsSortField = "creationTime"
	FindTermsSortFieldModificationTime FindTermsSortField = "modificationTime"
	FindTermsSortFieldType             FindTermsSortField = "type"
)

func (e FindTermsSortField) ToPointer() *FindTermsSortField {
	return &e
}

func (e *FindTermsSortField) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "term":
		fallthrough
	case "creationTime":
		fallthrough
	case "modificationTime":
		fallthrough
	case "type":
		*e = FindTermsSortField(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindTermsSortField: %v", v)
	}
}

type FindTermsSortOrder string

const (
	FindTermsSortOrderAsc  FindTermsSortOrder = "asc"
	FindTermsSortOrderDesc FindTermsSortOrder = "desc"
)

func (e FindTermsSortOrder) ToPointer() *FindTermsSortOrder {
	return &e
}

func (e *FindTermsSortOrder) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = FindTermsSortOrder(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindTermsSortOrder: %v", v)
	}
}

type FindTermsType string

const (
	FindTermsTypeApproved FindTermsType = "approved"
	FindTermsTypeBanned   FindTermsType = "banned"
	FindTermsTypePending  FindTermsType = "pending"
)

func (e FindTermsType) ToPointer() *FindTermsType {
	return &e
}

func (e *FindTermsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "approved":
		fallthrough
	case "banned":
		fallthrough
	case "pending":
		*e = FindTermsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FindTermsType: %v", v)
	}
}

type FindTermsRequest struct {
	Limit          *int64                 `queryParam:"style=form,explode=true,name=limit"`
	Offset         *int64                 `queryParam:"style=form,explode=true,name=offset"`
	OrganizationID *int64                 `pathParam:"style=simple,explode=false,name=organizationId"`
	PartOfSpeech   *FindTermsPartOfSpeech `queryParam:"style=form,explode=true,name=partOfSpeech"`
	SortField      *FindTermsSortField    `queryParam:"style=form,explode=true,name=sortField"`
	SortOrder      *FindTermsSortOrder    `queryParam:"style=form,explode=true,name=sortOrder"`
	Tags           []string               `queryParam:"style=form,explode=true,name=tags"`
	TeamID         int64                  `pathParam:"style=simple,explode=false,name=teamId"`
	Term           *string                `queryParam:"style=form,explode=true,name=term"`
	Type           *FindTermsType         `queryParam:"style=form,explode=true,name=type"`
}

func (o *FindTermsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *FindTermsRequest) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *FindTermsRequest) GetOrganizationID() *int64 {
	if o == nil {
		return nil
	}
	return o.OrganizationID
}

func (o *FindTermsRequest) GetPartOfSpeech() *FindTermsPartOfSpeech {
	if o == nil {
		return nil
	}
	return o.PartOfSpeech
}

func (o *FindTermsRequest) GetSortField() *FindTermsSortField {
	if o == nil {
		return nil
	}
	return o.SortField
}

func (o *FindTermsRequest) GetSortOrder() *FindTermsSortOrder {
	if o == nil {
		return nil
	}
	return o.SortOrder
}

func (o *FindTermsRequest) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *FindTermsRequest) GetTeamID() int64 {
	if o == nil {
		return 0
	}
	return o.TeamID
}

func (o *FindTermsRequest) GetTerm() *string {
	if o == nil {
		return nil
	}
	return o.Term
}

func (o *FindTermsRequest) GetType() *FindTermsType {
	if o == nil {
		return nil
	}
	return o.Type
}

type FindTermsResponse struct {
	ContentType                     string
	Headers                         map[string][]string
	PaginatedResultFullTermWithUser *shared.PaginatedResultFullTermWithUser
	StatusCode                      int
	RawResponse                     *http.Response
}

func (o *FindTermsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *FindTermsResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *FindTermsResponse) GetPaginatedResultFullTermWithUser() *shared.PaginatedResultFullTermWithUser {
	if o == nil {
		return nil
	}
	return o.PaginatedResultFullTermWithUser
}

func (o *FindTermsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *FindTermsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
